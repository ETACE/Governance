"increase_exit_smooth_young")
# select the experiment you want to study
experiment <- experiment_list[1]
# set parameters ------------------------------------------
n <- 10^6 # number of firms (initial incumbents)
t <- 10^2 # number of periods
tc <- 60  # critical period (i.e. when the shock hits)
yc <- 10  # critical year (i.e. divides young and old firms)
# exit rate (complement of survival rate)
pr_survival_y <- rep(0.95,t)
pr_survival_o <- rep(0.95,t)
# entry rate
pr_entry <- rep(0.04,t)
# set variables -------------------------------------------
n_incumbents <- rep(0,t)
n_entrants <- rep(0,t)
n_exiters <- rep(0,t)
# adjust the entr/exit rates according to the experiment
if (experiment == "baseline"){
pr_survival_y <- rep(0.85,t)
pr_survival_o <- rep(0.95,t)
} else if (experiment == "increase_exit_abrupt_young"){
pr_survival_y[(tc+1):t] <- 0.85
} else if (experiment == "increase_exit_smooth_young"){
pr_survival_y[(tc+1):t] <- seq(from=0.95, to=0.85, length.out=t-tc)
}
# simulation running --------------------------------------
for (i in 1:t){
set.seed(1)
# identify incumbents
if (i == 1){
n_incumbents[i] <- n
id_incumbents <- 1:n
# initialize age
age <- rep(1,n)
} else if (i > 1){
n_incumbents[i] <- length(id_alive)
id_incumbents <- id_alive
}
# count entrants and add zero age for them
n_entrants[i] <- ceiling(pr_entry[i] * n_incumbents[i])
age <- c(age, rep(0, n_entrants[i]))
# identify young and old firms
id_young <- id_incumbents[age[id_incumbents]<10 & !is.na(age[id_incumbents])]
id_old <- id_incumbents[age[id_incumbents]>=10 & !is.na(age[id_incumbents])]
n_young <- length(id_young)
n_old <- length(id_old)
# sample the surviving firms and the dying firms
if (length(id_young)>0){
id_alive_young <- sample(id_young, ceiling(pr_survival_y[i] * n_young), replace = F)
id_dead_young <- setdiff(id_young, id_alive_young)
}
if (length(id_old)>0){
id_alive_old <- sample(id_old, ceiling(pr_survival_o[i] * n_old), replace = F)
id_dead_old <- setdiff(id_old, id_alive_old)
}
if (length(id_old)>0){
id_alive <- c(id_alive_young, id_alive_old)
id_dead <- c(id_dead_young, id_dead_old)
} else {
id_alive <- id_alive_young
id_dead <- id_dead_young
}
# count exiters
n_exiters[i] <- length(id_dead)
# bind and sort the alive firms with the new ones to assign them a new age
id_alive <- sort(c(id_alive, length(age):(length(age)-n_entrants[i]+1)))
age[id_alive] <- age[id_alive] + 1
age[id_dead] <- NA
}
rm(i)
# transofm age into a data.frame
df_age <- data.frame(age) %>%
mutate(sector = rep("sim."))
# plot age distribution (level-level)
ggplot(df_age, aes(x=age, fill=sector, col=sector)) +
geom_histogram(bins=t+1, alpha=.7) +
scale_fill_brewer(palette = "Pastel2") +
scale_color_brewer(palette = "Pastel2") +
ggtitle("Age distribution") +
xlab("Age") +
ylab("Frequency") +
theme_bw()
# plot age distribution (level-log)
ggplot(df_age, aes(x=age, fill=sector, col=sector)) +
geom_histogram(bins=t+1, alpha=.7) +
scale_fill_brewer(palette = "Pastel2") +
scale_color_brewer(palette = "Pastel2") +
ggtitle("Age distribution") +
xlab("Age") +
ylab("log-Frequency") +
scale_y_log10() +
theme_bw()
rm(list = ls())
library(tidyverse)
library(knitr)
library(kableExtra)
set.seed(1)
N <- 1000
df <- data.frame(
id = as.character(1001:2000),
age = as.integer(runif(n=N, min=17.5, max=24.5)),
geo = sample(x = c("France", "Germany"), size = N, replace = T),
parent_wage = round(rnorm(n=N, mean=50000, sd=4000),2),
avg_grade = round(rnorm(n=N, mean=80, sd=5),2)
)
str(subset(df, filter = geo, select = c("France")))
subset(df, filter = geo, select = c("France"))
subset(df, select = geo)
subset(df, select = geo, subset = geo == "France")
subset(df, select = geo)
?subset
str(subset(df, geo == "France"))
sum(df$geo=="France")
table(df$geo)
str(df$geo)
str(df$avg_grade)
df %>%
filter(avg_grade) %>%
top_n(1)
df %>% %>%
top_n(avg_grade, 1)
df %>%
top_n(avg_grade)
df %>%
selectavg_grade) %>%
top_n(1)
df %>%
selectavg_grade) %>%
top_n()
df %>%
selectavg_grade) %>%
top_n(n = 1)
hist(avg_grage ~ id, data=df)
hist(avg_grade)
hist(df$avg_grade)
table(df$geo=="France")
df %>%
summarize(top_n(1))
df %>%
filter(geo %in% c("France"))
df_fr %>%
filter(geo %in% c("France"))
df_fr <- df %>%
filter(geo %in% c("France"))
df %>%
arrange(desc(avg_grade))
df %>%
arrange(desc(avg_grade)) %>%
top_n(1)
df %>%
filter(avg_grade == max(avg_grade))
tally(df$geo == "France")
?tally(df$geo == "France")
?tally(df$geo)
tally(df$geo)
tally(df, geo)
tally(df) %>% group_by(geo)
tally(df)
tally(df$geo)
df %>%
group_by(desc(avg_grade)) %>%
top_n(1)
df %>%
group_by(desc(avg_grade))
histogram(df$avg_grade)
hist(df$avg_grade)
dim(df$geo)
df %>%
group_by(avg_grade) %>%
arrange(desc) %>%
top_n(5)
df %>%
group_by(avg_grade) %>%
arrange(desc) %>%
top_n(5)
df %>%
group_by(avg_grade)
df %>%
group_by(avg_grade) %>%
arrange(desc(avg_grade)) %>%
top_n(5)
mj=df[df$geo]
sum(mj)
summary(mj)
mj=df[df$geo]
summary(mj)
x=df[df$avg_grade,c("id","age","geo")]
max(x)
str(df)
str(df$geo)
summarise(df)
summarise(df$geo)
summarize(df$geo)
summary(df$geo)
df %>% sort(geo) %>% filter("France")
df %>% select(id, age, geo, avg_grade) %>% arrange(desc(avg_grade))
df %>%
arrange(desc(avg_grade))
df %>%
arrange(desc(avg_grade))
%>%
top_n(1)
df %>%
which.max(avg_grade)
df %>%
filter(which.max(avg_grade))
df %>%
filter(which.max("avg_grade"))
?which.max
which.max(df$avg_grade)
geom_histogram(df, aes(avg_grade))
geom_histogram(df, aes(x=avg_grade))
geom_histogram(df, aes(avg_grade))
ggplot(df, aes(x=avg_grade))+
geom_point()
df %>%
group_by(avg_grade) %>%
arrange(desc(avg_grade)) %>%
top_n(1)
ggplot(data = df, aes(x_d=avg_grade)) +
geom_point()
subset(df, geo=="France")
nrow(df$geo=="France")
m0 <- 100
rho <- 0.8
sd <- 1
m <- rep(NA,I)
e <- rnorm(100,0,1)
for (i in 2:I){
m[i] <- rho * m[i-1] + e * sd
}
plot(m)
m0 <- 100
rho <- 0.8
sd <- 1
m <- rep(NA,I)
I <- 100
m <- rep(0,I)
e <- rnorm(100,0,1)
for (i in 2:I){
m[i] <- rho * m[i-1] + e * sd
}
plot(m)
rho <- 0.8
sd <- 1
I <- 100
m <- rep(0,I)
e <- rnorm(100,0,1)
m[1] <- 100
for (i in 2:I){
m[i] <- rho * m[i-1] + e * sd
}
plot(m)
rho <- 0.8
sd <- 1
I <- 100
m <- rep(0,I)
e <- rnorm(100,0,1)
m[1] <- 0
for (i in 2:I){
m[i] <- rho * m[i-1] + e * sd
}
plot(m)
rho <- 0.8
sd <- 1
I <- 100
m <- rep(0,I)
e <- rnorm(100,0,1)
m[1] <- 0
for (i in 2:I){
m[i] <- rho * m[i-1] + e[i] * sd
}
plot(m)
rho <- 0.8
sd <- 1
I <- 100
m <- rep(0,I)
e <- rnorm(100,0,1)
m[1] <- 100
for (i in 2:I){
m[i] <- rho * m[i-1] + e[i] * sd
}
plot(m, type = "l")
rho <- 0.8
sd <- 1
I <- 100
m <- rep(0,I)
e <- rnorm(100,0,1)
m[1] <- 0
for (i in 2:I){
m[i] <- rho * m[i-1] + e[i] * sd
}
plot(m, type = "l")
rho <- 0.8
sd <- 1
I <- 100
m <- rep(0,I)
e <- rnorm(100,0,1)
m[1] <- 0
for (i in 2:I){
m[i] <- 1000 + rho * m[i-1] + e[i] * sd
}
plot(m, type = "l")
rho <- 0.8
sd <- 1
I <- 100
m <- rep(0,I)
e <- rnorm(100,0,1)
m0 <- 100
for (i in 2:I){
m[i] <- m0 + rho * m[i-1] + e[i] * sd
}
plot(m, type = "l")
rho <- 0.8
sd <- 1
I <- 100
m <- rep(0,I)
e <- rnorm(100,0,1)
m0 <- 100
for (i in 2:I){
m[i] <- m0 + rho * m[i-1] + e[i] * sd
}
plot(m, type = "l")
rho <- 0.8
sd <- 1
I <- 100
m <- rep(0,I)
e <- rnorm(100,0,1)
m0 <- 100
m[1] <- m0
for (i in 2:I){
m[i] <- m0 + rho * m[i-1] + e[i] * sd
}
plot(m, type = "l")
100/1-0.8
100/(1-0.8)
# parameters
I <- 100
rho <- 0.8
sd <- 1
# initial market size
m0 <- 100
e0 <- 0
m[1] <- m0
e[1] <- e0
# empty variables
m <- rep(0,I)
e <- rep(0,I)
# stochastic process
for (i in 2:I){
e[i] <- rho * e[i-1] + rnorm(1) * sd
m[i] <- m0 + e[i]
}
# plot
plot(m, type = "l")
# parameters
I <- 100
rho <- 0.8
sd <- 1
# initial market size
m0 <- 100
e0 <- 0
# empty variables
m <- rep(0,I)
e <- rep(0,I)
m[1] <- m0
e[1] <- e0
# stochastic process
for (i in 2:I){
e[i] <- rho * e[i-1] + rnorm(1) * sd
m[i] <- m0 + e[i]
}
# plot
plot(m, type = "l")
# Title:    Ownership structure, appropriability and industry dynamics
# Authors:  Guerini Mattia, Harting Philipp, Napoletano Mauro
# Version:  06-05-2019
# preparation -----------------------------------------------------------------
rm(list=ls())
library(tidyverse)
library(eurostat)
library(reshape2)
library(haven)
# other sources: eurostat data sbs_na_ind_r2
# productivity growth by industry EU-KLEMS ------------------------------------
# import own written functions
setwd("~/Google Drive/policyOfce_Italy/mg_codes")
source("mg_functions.R")
# set auxiliary useful variables
years <- seq(as.Date("1970/12/31"), as.Date("2015/12/31"), "years")
countries <- c("DE", "FR", "IT", "UK")
nace_sectors <- c("TOT", "MARKT", "A", "B", "C", "D-E", "F",
"G", "H", "I", "J", "K", "L", "M-N", "O-U")
nace_sectors_long <- c("TOTAL INDUSTRIES",
"MARKET ECONOMY",
"AGRICULTURE, FORESTRY AND FISHING",
"MINING AND QUARRYING",
"TOTAL MANUFACTURING",
"ELECTRICITY, GAS AND WATER SUPPLY",
"CONSTRUCTION",
"WHOLESALE AND RETAIL TRADE; REPAIR OF MOTOR VEHICLES AND MOTORCYCLES",
"TRANSPORTATION AND STORAGE",
"ACCOMMODATION AND FOOD SERVICE ACTIVITIES",
"INFORMATION AND COMMUNICATION",
"FINANCIAL AND INSURANCE ACTIVITIES",
"REAL ESTATE ACTIVITIES",
"PROFESSIONAL, SCIENTIFIC, TECHNICAL, ADMINISTRATIVE AND SUPPORT SERVICE ACTIVITIES",
"COMMUNITY SOCIAL AND PERSONAL SERVICES")
tfp <- vector(mode="list", length = length(nace_sectors))
names(tfp) <- nace_sectors
# load capital tables and output tables for the selected countries
setwd("~/Google Drive/policyOfce_Italy/eu_klems_data/")
output <- lapply(paste0(countries,"_output_17i.xlsx"), read_excel_allsheets)
names(output) <- countries
# load data for each industry
for (i in 1:length(nace_sectors)){
tfp[[i]] <- extract_euklems(data_list = output,
variable = "TFPva_I", # TFPlp1_I
countries = countries,
years = years,
output = T,
time0 = "1998/01/01",
nace_cod = nace_sectors[i]) %>%
group_by(country) %>%
mutate(., value_index = value / value[year == "1998-12-31"]) %>%
ungroup(.) %>%
mutate(., country = if_else(country == "DE", "Germany", country)) %>%
mutate(., country = if_else(country == "FR", "France", country)) %>%
mutate(., country = if_else(country == "IT", "Italy", country)) %>%
mutate(., country = if_else(country == "UK", "United Kingdom", country))
}
rm(i)
tfp <- bind_rows(tfp, .id = "col_label") %>%
select(-col_label)
g1 <- ggplot(tfp, aes(x=year, y=value_index, group=country, col=country)) +
facet_wrap(variable~., nrow = 4, scales = "free") +
geom_line(size=1.2) +
geom_point(size=1.2) +
geom_hline(yintercept=1, linetype="dashed", col="black") +
scale_x_date(breaks = "2 years", date_labels = "%Y") +
xlab("") +
ylab("TFP index") +
ggtitle("Total Factor Productivity (total economy)") +
theme_bw() +
theme(axis.text.x = element_text(size=12),
axis.text.y = element_text(size=12),
axis.text = element_text(size=12),
axis.title = element_text(size=12),
plot.title = element_text(face="bold", size=15),
legend.title = element_text(face="bold", size=12),
legend.text = element_text(size = 12),
legend.position = "right")
tfp_growth <- tfp %>%
group_by(variable, country) %>%
summarise(tfp_growth = mean(dl_value, na.rm = T)) %>%
dcast(variable~country, value.var = "tfp_growth") %>%
mutate(sector = nace_sectors_long) %>%
select(variable, everything()) %>%
select(-sector)
mean(tfp_growth$variable)
mean(tfp_growth$variable, na.rm = T)
View(tfp_growth)
View(tfp)
mean(tfp$dl_value, na.rm = T)
mean(tfp$dl_value[variable == "TOT"], na.rm = T)
mean(tfp$dl_value[tfp$variable == "TOT"], na.rm = T)
View(tfp)
temp <- tfp %>% filter(country != "Italy")
mean(temp$dl_value)
mean(temp$dl_value, na.rm = T)
mean(temp$dl_value[temp$variable == "TOT"], na.rm = T)
View(tfp_growth)
mean(temp$dl_value[temp$variable == "C"], na.rm = T)
mean(tfp$dl_value[tfp$variable == "C"], na.rm = T)
mean(temp$dl_value[temp$variable == "TOT" & ! temp$year %in% c("2008-01-01", "2009-12-31")], na.rm = T)
mean(temp$dl_value[temp$variable == "TOT" & !temp$year %in% c("2008-01-01", "2009-12-31")], na.rm = T)
mean(temp$dl_value[temp$variable == "TOT" & temp$year != c("2008-01-01", "2009-12-31")], na.rm = T)
temp2 <- temp %>% filter(year != c("2008-12-31", "2009-12-31"))
View(temp2)
mean(temp$dl_value[temp$variable == "TOT"], na.rm = T)
mean(temp2$dl_value[temp2$variable == "TOT"], na.rm = T)
View(tfp)
temp2 <- temp %>% filter(year != c("2008-12-31", "2009-12-31", "2010-12-31"))
View(temp2)
temp2 <- temp %>% filter(!year %in% c("2008-12-31", "2009-12-31", "2010-12-31"))
temp2 <- temp %>% filter(year < "2008-12-31" & year > "2010-12-31"))
temp2 <- temp %>% filter(year < "2008-12-31" & year > "2010-12-31")
temp2 <- temp %>% filter(year > "2008-12-31" & year < "2010-12-31")
temp2 <- temp %>% filter(year < "2008-12-31" | year > "2010-12-31"))
temp2 <- temp %>% filter(year < "2008-12-31" | year > "2010-12-31")
View(temp2)
temp2 <- temp %>% filter(year < "2008-12-31" | year > "2010-12-31") %>%
filter(variable == "TOT")
View(temp2)
View(tfp)
View(temp)
temp <- tfp %>%
filter(year < "2008-12-31" | year > "2010-12-31") %>%
filter(variable == "TOT")
# final prova
temp <- tfp %>%
filter(year < "2008-12-31" | year > "2010-12-31") %>%
filter(variable == "TOT")
mean(temp$dl_value, na.rm = T)
# final prova
temp <- tfp %>%
filter(year < "2008-12-31" | year > "2010-12-31") %>%
filter(variable == "TOT") %>%
filter(country != "Italy")
mean(temp$dl_value, na.rm = T)
0.54/0.37
