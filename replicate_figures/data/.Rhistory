geom_smooth(method = "lm") +
facet_wrap(state~., nrow = 2) +
coord_cartesian(xlim=c(0,0.1), ylim=c(0, 1000000)) +
ggtitle("Area Vs Population") +
xlab("Area") +
ylab("Population") +
scale_colour_brewer(palette = "Set1") +
theme_bw() +
theme(legend.position = "none")
midwest_state <- midwest %>%
group_by(state) %>%
summarise(poptotal = sum(poptotal),
area = sum(area),
popdensity = mean(popdensity),
percwhite = mean(percwhite),
percblack = mean(percblack),
percamerindan = mean(percamerindan),
percasian = mean(percasian),
percother = mean(percother)) %>%
ungroup()
ggplot(data = midwest_state, aes(x = state, y = percasian, col = state, fill = state)) +
facet_grid(~state) +
geom_col() +
scale_colour_brewer(palette = "Set1") +
scale_fill_brewer(palette = "Set1") +
theme_bw()
ggplot(data = midwest_state, aes(x = state, y = percasian, col = state, fill = state)) +
geom_col() +
scale_colour_brewer(palette = "Set1") +
scale_fill_brewer(palette = "Set1") +
theme_bw()
ggplot(data = midwest_state, aes(x = state, y = percasian, col = state, fill = state)) +
geom_col() +
geom_point() +
geom_line() +
scale_colour_brewer(palette = "Set1") +
scale_fill_brewer(palette = "Set1") +
theme_bw()
ggplot(data = midwest_state, aes(x = state, y = percasian, col = state, fill = state)) +
geom_col() +
geom_point(size = 5) +
scale_colour_brewer(palette = "Set1") +
scale_fill_brewer(palette = "Set1") +
theme_bw()
ggplot(data = midwest_state, aes(x = state, y = percasian, col = state, fill = state)) +
geom_col(alpha = 0.9) +
geom_point(size = 5) +
scale_colour_brewer(palette = "Set1") +
scale_fill_brewer(palette = "Set1") +
theme_bw()
ggplot(data = midwest_state, aes(x = state, y = percasian, col = state, fill = state)) +
geom_col(alpha = 0.2) +
geom_point(size = 5) +
scale_colour_brewer(palette = "Set1") +
scale_fill_brewer(palette = "Set1") +
theme_bw()
?glm
#test data
set.seed(15)
mm<-matrix(ifelse(runif(9*12)<.3, 0, rpois(9*12,1)) , ncol=12); mm
View(mm)
#test data
set.seed(15)
mm<-matrix(rnorm(100,mean=0.5,sd=0.2))
mm
View(mm)
mm<-matrix(rnorm(100,mean=0.5,sd=0.2), nrow = 10)
mm
set.seed(15)
mm<-matrix(rnorm(100,mean=0.5,sd=0.2), nrow = 10)
mm
View(mm)
mm<-matrix(rnorm(100,mean=0.5,sd=0.3), nrow = 10)
mm<-matrix(rnorm(100,mean=0.5,sd=0.5), nrow = 10)
View(mm)
#first non-zero value from each row.
apply(mm,1, function(x) head(x[x!=0],1))
#first non-zero value from each row.
apply(mm,1, function(x) which(x[x<0],1))
#test data
set.seed(15)
mm<-matrix(rnorm(100,mean=0.5,sd=0.5), nrow = 10)
mm
#first non-zero value from each row.
apply(mm,1, function(x) which(x[x<0],1))
#first non-zero value from each row.
apply(mm,1, function(x) which(x[x<0]))
#first non-zero value from each row.
apply(mm,1, function(x) which(x<0))
View(mm)
library(tidyverse)
#first non-zero value from each row.
apply(mm,1, function(x) if_else(is.interger(which(x<0)[1]),which(x<0)[1],33))
#first non-zero value from each row.
apply(mm,1, function(x) if_else(is.integer(which(x<0)[1]),which(x<0)[1],33))
#first non-zero value from each row.
apply(mm,1, function(x) if_else(is.integer(which(x<0)),which(x<0)[1],33))
#first non-zero value from each row.
apply(mm,1, function(x) if_else(is.null(which(x<0)), 33, which(x<0)[1]))
#test data
set.seed(15)
mm<-matrix(rnorm(100,mean=0.5,sd=0.5), nrow = 10)
mm
#first non-zero value from each row.
apply(mm,1, function(x) if_else(is.null(which(x<0)), 33, which(x<0)[1]))
is.null(which(x[1,]<0))
is.null(which(mm[1,]<0))
#first non-zero value from each row.
apply(mm,1, function(x) if_else(is.null(which(x<0))==T, 33, which(x<0)[1]))
#test data
set.seed(15)
mm<-matrix(rnorm(100,mean=0.5,sd=0.5), nrow = 10)
mm
#first non-zero value from each row.
apply(mm,1, function(x) if_else(is.null(which(x<0))==T, 33, which(x<0)[1]))
is.null(which(mm[1,]<0))
is.null(which(mm[2,]<0))
is.null(which(mm[3,]<0))
is.null(which(mm[8,]<0))
is.null(which(mm[9,]<0))
#test data
set.seed(15)
mm<-matrix(rnorm(100,mean=0.5,sd=0.5), nrow = 10)
mm
#first non-zero value from each row.
apply(mm,1, function(x) which(x<0)[1])
#test data
set.seed(15)
mm<-matrix(rnorm(100,mean=0.5,sd=0.5), nrow = 10)
mm
#first non-zero value from each row.
vec <- apply(mm,1, function(x) which(x<0)[1])
library(dplyr)
?first()
df <- mtcars
df <- mtcars %>%
mutate(prova = first(displ == 108))
library(tidyverse)
df <- mtcars %>%
mutate(prova = first(displ == 108))
df <- mtcars %>%
rownames_to_column()
df <- mtcars %>%
rownames_to_column(var = "name") %>%
group_by()
df <- mtcars %>%
rownames_to_column(var = "name")
df <- mtcars %>%
rownames_to_column(var = "name") %>%
group_by(name) %>%
mutate(first = min(which(mpg > 22))) %>%
ungroup()
View(df)
df <- mtcars %>%
rownames_to_column(var = "name") %>%
group_by(name) %>%
mutate(first = min(which(mpg > 22))) %>%
ungroup() %>%
mutate(first = if_else(is.infinite(first, 33, first)))
df <- mtcars %>%
rownames_to_column(var = "name") %>%
group_by(name) %>%
mutate(first = min(which(mpg > 22))) %>%
ungroup() %>%
mutate(first = if_else(is.infinite(first), 33, first))
View(df)
df <- mtcars %>%
rownames_to_column(var = "name") %>%
group_by(name) %>%
mutate(first = min(which(mpg > 22))) %>%
ungroup() %>%
mutate(first = if_else(is.infinite(first), 33, first)) %>%
select(name, mpg, first)
View(df)
x <- rep(0,100)
y <- rep(1,100)
cor(x,y)
library(tidyverse)
x <- rnorm()
x <- rnorm(1000000)
ntile(x,100)
?ntile
rep(1,10)
rep(1)
rep(10)
rep(10,1)
x <- c(15.5, 17, 3/4, 77)
y <- c(1, 2, 3, 4)
X <- matrix(x, 2, 2)
Y <- matrix(y, 2, 2)
X%*%Y
x <- c(15.5, 17, 3/4, 77)
y <- c(12, 1.2, 3/4, 2)
X <- matrix(x, 2, 2)
Y <- matrix(y, 2, 2)
X%*%Y
X
Y
Z <- X%*%Y
Z
X%*%Y
X*Y
X%/%Y
# Q5
A <- matrix(rnorm(25), nrow = 5)
A
# Q8
solve(A)
A^-1
# Q9
library(tidyverse)
load(iris)
iris <- iris
iris %>%
filter(Species == "setosa") %>%
filter(Petal.Length>1.4) %>%
select(Petal.Width) %>%
summarise(mu = mean(Petal.Width))
iris %>%
filter(Species == "setosa") %>%
filter(Petal.Length>1.4) %>%
summarise(mu = mean(Petal.Width))
# Q10
my_function <- function(x,y,z){
if (x>y){
if(x>z){
result = x*2
}
}
if (x<y){
if(x>z){
result = x+2
}
}
if (x>y){
if(x<z){
result = x+2
}
}
if (x<y){
if(x<z){
result = x/2
}
}
print(result)
}
x <- c(4,1)
y <- c(5,2)
z <- c(2,3)
my_function(x,y,z)
x <- c(4,1)
y <- c(5,2)
# Q10
my_function <- function(x,y,z){
N <- length(x)
result <- rep(0,N)
for (i in 1:N){
if (x[i]>y[i]){
if(x[i]>z[i]){
result[i] = x[i]*2
}
}
if (x[i]<y[i]){
if(x[i]>z[i]){
result = x+2
}
}
if (x[i]>y[i]){
if(x[i]<z[i]){
result[i] = x[i]+2
}
}
if (x[i]<y[i]){
if(x[i]<z[i]){
result[i] = x[i]/2
}
}
}
}
x <- c(4,1)
y <- c(5,2)
z <- c(2,3)
my_function(x,y,z)
k <- my_function(x,y,z)
# Q10
my_function <- function(x,y,z){
N <- length(x)
result <- rep(0,N)
for (i in 1:N){
if (x[i]>y[i]){
if(x[i]>z[i]){
result[i] = x[i]*2
}
}
if (x[i]<y[i]){
if(x[i]>z[i]){
result = x+2
}
}
if (x[i]>y[i]){
if(x[i]<z[i]){
result[i] = x[i]+2
}
}
if (x[i]<y[i]){
if(x[i]<z[i]){
result[i] = x[i]/2
}
}
}
result
}
x <- c(4,1)
y <- c(5,2)
z <- c(2,3)
my_function(x,y,z)
setwd("~/Documents/GitHub/Governance/replicate_figures/code/")
# Title:    Replication file for Fig. 1
# Authors:  MG-PH-MN
# Version:  2020 December 14
library(tseries)
library(tidyverse)
library(viridis)
library(RColorBrewer)
library(reshape2)
rm(list = ls())
# import data and stationarity test --------------------------------------------
setwd("~/Documents/GitHub/Governance/replicate_figures/data/")
data_hhi <- read_csv("batch_mean_herfindahl_index.csv") %>%
setNames(c("time","HHI")) %>%
filter(time > 20000 & time <= 50000)
adf.test(data_hhi$HHI, alternative = "stationary")
data_hhi <- read_csv("batch_mean_herfindahl_index.csv") %>%
setNames(c("time","HHI"))
data_nfirms <- read_csv("batch_mean_num_active_firms.csv") %>%
setNames(c("time","N_firms"))
data_both <- bind_cols(data_hhi, data_nfirms[,2])
# time series ------------------------------------------------------------------
ggplot(data_both, aes(x=time)) +
geom_line(aes(y=HHI, colour = "HHI"), size = 1.2) +
geom_line(aes(y=N_firms/50, colour = "Num. Firms"), size = 1.2) +
scale_y_continuous(sec.axis = sec_axis(~.*50, name = "Num. Firms")) +
scale_colour_manual(values = c("blue", "black")) +
labs(colour = "Variable") +
theme_bw() +
theme(panel.background = element_rect(fill = NA),
panel.grid.minor = element_blank(),
legend.background = element_rect(linetype="solid", colour ="black", size = .8),
axis.text.x = element_text(size=13),
axis.text.y = element_text(size=13),
axis.text = element_text(size=13),
axis.title = element_text(size=13),
plot.title = element_text(face="bold", size=15),
legend.title = element_blank(),
legend.text = element_text(size = 13),
strip.text = element_text(face="bold", size=13),
legend.position = "bottom")
ggsave("~/Documents/GitHub/Governance/replicate_figures/figs/fig1.pdf")
# Title:    Replication file for Fig. 2-3 (triangles)
# Authors:  MG-PH-MN
# Version:  2021 January 12
library(tidyverse)
library(ggtern)
library(viridis)
library(RColorBrewer)
rm(list = ls())
# Import and clean data ====
setwd("~/Documents/GitHub/Governance/replicate_figures/data/")
load("data_time_evolution.Rdata")
rm(i, p1, p2, par1, par2, parameter1, parameter2, pathdata, pathfigs, probe, runs, parameter_list,
gamplot, getdata, retrieve_data)
data <- DATA %>%
filter(t == 50000)
rm(DATA)
# Preparation ====
runs <- 20
log <- FALSE
par1 <- c("0.0", "0.01","0.02","0.04","0.06","0.08",
"0.1", "0.12","0.14","0.16","0.18",
"0.2","0.22","0.24","0.26","0.28",
"0.3","0.32","0.34","0.36","0.38",
"0.4","0.42","0.44","0.46","0.48",
"0.5","0.52","0.54","0.56","0.58",
"0.6","0.62","0.64","0.66","0.68",
"0.7","0.72","0.74","0.76","0.78",
"0.8","0.82","0.84","0.86","0.88",
"0.9","0.92","0.94","0.96","0.98","1.0")
par2 <- par1
# Plot triangle for the productivity growth ====
variable <- "annual_growth_weighted_productivity"
log <- FALSE
TEMP <- c()
DATA1 <- c()
for(p1 in 1:length(par1))  {
for(p2 in 1:length(par2))  {
eval(parse(text=paste("temp = data[data$par1==par1[p1] & data$par2==par2[p2],]$",
variable,
sep="")))
if(log){
temp <- log(temp)
}
TEMP <- rbind(TEMP,
data.frame(x=as.numeric(par2[p2]),
y=(1-as.numeric(par2[p2]))*as.numeric(par1[p1]),
z = (1-as.numeric(par2[p2]))*(1-as.numeric(par1[p1])),
val = mean(temp)))
DATA1 = rbind(DATA1,
data.frame(r=1:runs,
x=as.numeric(par2[p2]),
y=as.numeric(par1[p1]),
val=temp))
}
}
# change names (for the legend)
TEMP1 <- TEMP %>%
setNames(c("x", "y", "z", "Prod.Growth"))
# plot it
ggtern(TEMP1, aes(x=x,y=y,z=z)) +
geom_point(size=6, aes(color=Prod.Growth), alpha = 1) +
scale_color_viridis(direction = 1) +
geom_segment(aes(x=10, y=0, z=90, xend=10,yend=90,zend=0),
size=.7, color="red", linetype = "dashed") +
geom_segment(aes(x=50, y=0, z=50, xend=50,yend=50,zend=0),
size=.7, color="blue", linetype = "dashed") +
geom_segment(aes(x=90, y=0, z=10, xend=90,yend=10,zend=0),
size=.7, color="black", linetype = "dashed") +
labs(x = "M", xarrow  = "Manager Influence",
y = "LTI", yarrow  = "LTI Influence",
z = "STI", zarrow  = "STI Influence") +
theme_bw() +
theme_showarrows() +
theme_clockwise() +
theme(panel.background = element_rect(fill = NA),
panel.grid.minor = element_blank(),
panel.grid.major = element_line(colour = "black", linetype = "dotted"),
panel.ontop = TRUE,
axis.text = element_text(size = 13),
legend.position=c(0.85, 0.8)
)
ggsave("~/Documents/GitHub/Governance/replicate_figures/figs/fig2_triangle.pdf")
# Plot triangle for the herfidahl-hirshman index ====
variable = "av_herfindahl_index"
log <- FALSE
TEMP <- c()
DATA1 <- c()
for(p1 in 1:length(par1))  {
for(p2 in 1:length(par2))  {
eval(parse(text=paste("temp = data[data$par1==par1[p1] & data$par2==par2[p2],]$",
variable,
sep="")))
if(log){
temp =log(temp)
}
TEMP = rbind(TEMP,
data.frame(x=as.numeric(par2[p2]),
y=(1-as.numeric(par2[p2]))*as.numeric(par1[p1]),
z = (1-as.numeric(par2[p2]))*(1-as.numeric(par1[p1])),
val = mean(temp)))
DATA1 = rbind(DATA1,
data.frame(r=1:runs,
x=as.numeric(par2[p2]),
y=as.numeric(par1[p1]),
val=temp))
}
}
# change names (for the legend)
TEMP2 <- TEMP %>%
setNames(c("x", "y", "z", "HHI"))
# plot it
ggtern(TEMP2, aes(x=x,y=y,z=z)) +
geom_point(size=6, aes(color=HHI), alpha = 1) +
scale_color_viridis(direction = -1) +
geom_segment(aes(x=10, y=0, z=90, xend=10,yend=90,zend=0),
size=.7, color="red", linetype = "dashed") +
geom_segment(aes(x=50, y=0, z=50, xend=50,yend=50,zend=0),
size=.7, color="blue", linetype = "dashed") +
geom_segment(aes(x=90, y=0, z=10, xend=90,yend=10,zend=0),
size=.7, color="black", linetype = "dashed") +
labs(x = "M", xarrow  = "Manager Influence",
y = "LTI", yarrow  = "LTI Influence",
z = "STI", zarrow  = "STI Influence") +
theme_bw() +
theme_showarrows() +
theme_clockwise() +
theme(panel.background = element_rect(fill = NA),
panel.grid.minor = element_blank(),
panel.grid.major = element_line(colour = "black", linetype = "dotted"),
panel.ontop = TRUE,
axis.text = element_text(size = 13),
legend.position=c(0.85, 0.8)
)
ggsave("~/Documents/GitHub/Governance/replicate_figures/figs/fig3_triangle.pdf")
rm(list = setdiff(ls(), c("TEMP1", "TEMP2", "data")))
# Title:    Replication file for Fig. 2-3 (triangles)
# Authors:  MG-PH-MN
# Version:  2021 January 12
library(tidyverse)
library(ggtern)
library(viridis)
library(RColorBrewer)
rm(list = ls())
# Import and clean data ====
setwd("~/Documents/GitHub/Governance/replicate_figures/data/")
load("data_time_evolution.Rdata")
rm(i, p1, p2, par1, par2, parameter1, parameter2, pathdata, pathfigs, probe, runs, parameter_list,
gamplot, getdata, retrieve_data)
data <- DATA %>%
filter(t == 50000)
rm(DATA)
save(data, file = "triangle_data.R")
save(data, file = "triangle_data.RData")
save(data, file = "triangle_data.Rdata")
