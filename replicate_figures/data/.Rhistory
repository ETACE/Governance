coord_cartesian(xlim=c(0,0.1), ylim=c(0, 1000000)) +
ggtitle("Area Vs Population", subtitle="From midwest dataset") +
xlab("Area") +
ylab("Population")
ggplot(data = midwest, aes(x = area, y = poptotal)) +
geom_point(size = 2, col = "steelblue") +
geom_smooth(method = "lm", col="firebrick") +
coord_cartesian(xlim=c(0,0.1), ylim=c(0, 1000000)) +
ggtitle("Area Vs Population") +
xlab("Area") +
ylab("Population")
ggplot(data = midwest, aes(x = area, y = poptotal, group = state, col = state)) +
geom_point() +
geom_smooth(method = "lm") +
coord_cartesian(xlim=c(0,0.1), ylim=c(0, 1000000)) +
ggtitle("Area Vs Population") +
xlab("Area") +
ylab("Population")
ggplot(data = midwest, aes(x = area, y = poptotal, col = state)) +
geom_point() +
geom_smooth(method = "lm") +
coord_cartesian(xlim=c(0,0.1), ylim=c(0, 1000000)) +
ggtitle("Area Vs Population") +
xlab("Area") +
ylab("Population")
ggplot(data = midwest, aes(x = area, y = poptotal)) +
geom_point(aes(col = state)) +
geom_smooth(method = "lm") +
coord_cartesian(xlim=c(0,0.1), ylim=c(0, 1000000)) +
ggtitle("Area Vs Population") +
xlab("Area") +
ylab("Population")
ggplot(data = midwest, aes(x = area, y = poptotal)) +
geom_point(aes(col = state)) +
geom_smooth(method = "lm") +
coord_cartesian(xlim=c(0,0.1), ylim=c(0, 1000000)) +
ggtitle("Area Vs Population") +
xlab("Area") +
ylab("Population") +
scale_colour_brewer(palette = "Set1")
brewer.pal.info
head(brewer.pal.info, 10)
library(RColorBrewer)
head(brewer.pal.info, 10)
brewer.pal.info
View(brewer.pal.info)
plot(brewer.pal.info)
brewer.pal
ggplot(data = midwest, aes(x = area, y = poptotal)) +
geom_point(aes(col = state)) +
geom_smooth(method = "lm") +
coord_cartesian(xlim=c(0,0.1), ylim=c(0, 1000000)) +
ggtitle("Area Vs Population") +
xlab("Area") +
ylab("Population") +
scale_colour_brewer(palette = "Set1") +
theme_bw()
ggplot(data = midwest, aes(x = county)) +
geom_histogram(aes(col = state))
ggplot(data = midwest, aes(x = county)) +
geom_histogram(aes(y=stat_identity(), col = state))
ggplot(data = midwest, aes(x = county)) +
geom_histogram(aes(y=stat_identity, col = state))
ggplot(data = midwest, aes(x = county))
ggplot(data = midwest, aes(x = county)) +
geom_bar(aes(col = state))
ggplot(data = midwest, aes(x = county)) +
geom_bar(aes(y=population, col = state)) +
scale_colour_brewer(palette = "Set1") +
theme_bw()
ggplot(data = midwest, aes(x = county)) +
geom_bar(aes(y=population))
midwest2 <- midwest %>%
group_by(state) %>%
summarise(population = sum(population),
area = sum(area),
popdensity = mean(popdensity),
percwhite = mean(percwhite),
percblack = mean(percblack),
percamerindan = mean(percamerindan),
percasian = mean(percasian),
percother = mean(perother)) %>%
ungroup()
midwest2 <- midwest %>%
group_by(state) %>%
summarise(poptotal = sum(poptotal),
area = sum(area),
popdensity = mean(popdensity),
percwhite = mean(percwhite),
percblack = mean(percblack),
percamerindan = mean(percamerindan),
percasian = mean(percasian),
percother = mean(perother)) %>%
ungroup()
midwest2 <- midwest %>%
group_by(state) %>%
summarise(poptotal = sum(poptotal),
area = sum(area),
popdensity = mean(popdensity),
percwhite = mean(percwhite),
percblack = mean(percblack),
percamerindan = mean(percamerindan),
percasian = mean(percasian),
percother = mean(percother)) %>%
ungroup()
View(midwest2)
midwest_state <- midwest %>%
group_by(state) %>%
summarise(poptotal = sum(poptotal),
area = sum(area),
popdensity = mean(popdensity),
percwhite = mean(percwhite),
percblack = mean(percblack),
percamerindan = mean(percamerindan),
percasian = mean(percasian),
percother = mean(percother)) %>%
ungroup()
ggplot(data = midwest_state, aes(x = state)) +
geom_bar(aes(y=poptot, col = state)) +
scale_colour_brewer(palette = "Set1") +
theme_bw()
ggplot(data = midwest_state, aes(x = state)) +
geom_bar(aes(y=poptotal, col = state)) +
scale_colour_brewer(palette = "Set1") +
theme_bw()
ggplot(data = midwest_state, aes(x = state)) +
geom_histogram(aes(y=poptotal, col = state)) +
scale_colour_brewer(palette = "Set1") +
theme_bw()
ggplot(data = midwest_state, aes(x = state)) +
geom_bar(aes(col = state)) +
scale_colour_brewer(palette = "Set1") +
theme_bw()
ggplot(data = midwest_state, aes(x = state)) +
geom_bar() +
scale_colour_brewer(palette = "Set1") +
theme_bw()
ggplot(data = midwest_state, aes(x = state, y = poptotal)) +
geom_bar() +
scale_colour_brewer(palette = "Set1") +
theme_bw()
ggplot(data = midwest_state, aes(x = state, y = poptotal, col = state, fill = state)) +
geom_bar() +
scale_colour_brewer(palette = "Set1") +
theme_bw()
ggplot(data = midwest_state, aes(x = state, y = poptotal, col = state, fill = state)) +
geom_col() +
scale_colour_brewer(palette = "Set1") +
theme_bw()
ggplot(data = midwest_state, aes(x = state, y = poptotal, col = state, fill = state)) +
geom_col() +
scale_colour_brewer(palette = "Set1") +
scale_fill_brewer(palette = "Set1") +
theme_bw()
ggplot(data = midwest_state, aes(x = state, y = percasian, col = state, fill = state)) +
geom_col() +
scale_colour_brewer(palette = "Set1") +
scale_fill_brewer(palette = "Set1") +
theme_bw()
ggplot(data = midwest_state, aes(x = state, y = percasian, col = state, fill = state)) +
facet_grid(state~.) +
geom_col() +
scale_colour_brewer(palette = "Set1") +
scale_fill_brewer(palette = "Set1") +
theme_bw()
ggplot(data = midwest, aes(x = area, y = poptotal)) +
geom_point(aes(col = state)) +
geom_smooth(method = "lm") +
coord_cartesian(xlim=c(0,0.1), ylim=c(0, 1000000)) +
ggtitle("Area Vs Population") +
xlab("Area") +
ylab("Population") +
scale_colour_brewer(palette = "Set1") +
theme_bw() +
facet_grid(.~state) +
facet_grid(.~state)
ggplot(data = midwest, aes(x = area, y = poptotal)) +
geom_point(aes(col = state)) +
geom_smooth(method = "lm") +
facet_wrap(state~., nrow = 2)
ggplot(data = midwest, aes(x = area, y = poptotal)) +
geom_point(aes(col = state)) +
geom_smooth(method = "lm") +
facet_wrap(state~., nrow = 2) +
coord_cartesian(xlim=c(0,0.1), ylim=c(0, 1000000)) +
ggtitle("Area Vs Population") +
xlab("Area") +
ylab("Population") +
scale_colour_brewer(palette = "Set1") +
theme_bw()
ggplot(data = midwest, aes(x = area, y = poptotal)) +
geom_point(aes(col = state)) +
geom_smooth(method = "lm") +
facet_wrap(state~., nrow = 2) +
coord_cartesian(xlim=c(0,0.1), ylim=c(0, 1000000)) +
ggtitle("Area Vs Population") +
xlab("Area") +
ylab("Population") +
scale_colour_brewer(palette = "Set1") +
theme_bw() +
theme(legend.position = "none")
midwest_state <- midwest %>%
group_by(state) %>%
summarise(poptotal = sum(poptotal),
area = sum(area),
popdensity = mean(popdensity),
percwhite = mean(percwhite),
percblack = mean(percblack),
percamerindan = mean(percamerindan),
percasian = mean(percasian),
percother = mean(percother)) %>%
ungroup()
ggplot(data = midwest_state, aes(x = state, y = percasian, col = state, fill = state)) +
facet_grid(~state) +
geom_col() +
scale_colour_brewer(palette = "Set1") +
scale_fill_brewer(palette = "Set1") +
theme_bw()
ggplot(data = midwest_state, aes(x = state, y = percasian, col = state, fill = state)) +
geom_col() +
scale_colour_brewer(palette = "Set1") +
scale_fill_brewer(palette = "Set1") +
theme_bw()
ggplot(data = midwest_state, aes(x = state, y = percasian, col = state, fill = state)) +
geom_col() +
geom_point() +
geom_line() +
scale_colour_brewer(palette = "Set1") +
scale_fill_brewer(palette = "Set1") +
theme_bw()
ggplot(data = midwest_state, aes(x = state, y = percasian, col = state, fill = state)) +
geom_col() +
geom_point(size = 5) +
scale_colour_brewer(palette = "Set1") +
scale_fill_brewer(palette = "Set1") +
theme_bw()
ggplot(data = midwest_state, aes(x = state, y = percasian, col = state, fill = state)) +
geom_col(alpha = 0.9) +
geom_point(size = 5) +
scale_colour_brewer(palette = "Set1") +
scale_fill_brewer(palette = "Set1") +
theme_bw()
ggplot(data = midwest_state, aes(x = state, y = percasian, col = state, fill = state)) +
geom_col(alpha = 0.2) +
geom_point(size = 5) +
scale_colour_brewer(palette = "Set1") +
scale_fill_brewer(palette = "Set1") +
theme_bw()
?glm
#test data
set.seed(15)
mm<-matrix(ifelse(runif(9*12)<.3, 0, rpois(9*12,1)) , ncol=12); mm
View(mm)
#test data
set.seed(15)
mm<-matrix(rnorm(100,mean=0.5,sd=0.2))
mm
View(mm)
mm<-matrix(rnorm(100,mean=0.5,sd=0.2), nrow = 10)
mm
set.seed(15)
mm<-matrix(rnorm(100,mean=0.5,sd=0.2), nrow = 10)
mm
View(mm)
mm<-matrix(rnorm(100,mean=0.5,sd=0.3), nrow = 10)
mm<-matrix(rnorm(100,mean=0.5,sd=0.5), nrow = 10)
View(mm)
#first non-zero value from each row.
apply(mm,1, function(x) head(x[x!=0],1))
#first non-zero value from each row.
apply(mm,1, function(x) which(x[x<0],1))
#test data
set.seed(15)
mm<-matrix(rnorm(100,mean=0.5,sd=0.5), nrow = 10)
mm
#first non-zero value from each row.
apply(mm,1, function(x) which(x[x<0],1))
#first non-zero value from each row.
apply(mm,1, function(x) which(x[x<0]))
#first non-zero value from each row.
apply(mm,1, function(x) which(x<0))
View(mm)
library(tidyverse)
#first non-zero value from each row.
apply(mm,1, function(x) if_else(is.interger(which(x<0)[1]),which(x<0)[1],33))
#first non-zero value from each row.
apply(mm,1, function(x) if_else(is.integer(which(x<0)[1]),which(x<0)[1],33))
#first non-zero value from each row.
apply(mm,1, function(x) if_else(is.integer(which(x<0)),which(x<0)[1],33))
#first non-zero value from each row.
apply(mm,1, function(x) if_else(is.null(which(x<0)), 33, which(x<0)[1]))
#test data
set.seed(15)
mm<-matrix(rnorm(100,mean=0.5,sd=0.5), nrow = 10)
mm
#first non-zero value from each row.
apply(mm,1, function(x) if_else(is.null(which(x<0)), 33, which(x<0)[1]))
is.null(which(x[1,]<0))
is.null(which(mm[1,]<0))
#first non-zero value from each row.
apply(mm,1, function(x) if_else(is.null(which(x<0))==T, 33, which(x<0)[1]))
#test data
set.seed(15)
mm<-matrix(rnorm(100,mean=0.5,sd=0.5), nrow = 10)
mm
#first non-zero value from each row.
apply(mm,1, function(x) if_else(is.null(which(x<0))==T, 33, which(x<0)[1]))
is.null(which(mm[1,]<0))
is.null(which(mm[2,]<0))
is.null(which(mm[3,]<0))
is.null(which(mm[8,]<0))
is.null(which(mm[9,]<0))
#test data
set.seed(15)
mm<-matrix(rnorm(100,mean=0.5,sd=0.5), nrow = 10)
mm
#first non-zero value from each row.
apply(mm,1, function(x) which(x<0)[1])
#test data
set.seed(15)
mm<-matrix(rnorm(100,mean=0.5,sd=0.5), nrow = 10)
mm
#first non-zero value from each row.
vec <- apply(mm,1, function(x) which(x<0)[1])
library(dplyr)
?first()
df <- mtcars
df <- mtcars %>%
mutate(prova = first(displ == 108))
library(tidyverse)
df <- mtcars %>%
mutate(prova = first(displ == 108))
df <- mtcars %>%
rownames_to_column()
df <- mtcars %>%
rownames_to_column(var = "name") %>%
group_by()
df <- mtcars %>%
rownames_to_column(var = "name")
df <- mtcars %>%
rownames_to_column(var = "name") %>%
group_by(name) %>%
mutate(first = min(which(mpg > 22))) %>%
ungroup()
View(df)
df <- mtcars %>%
rownames_to_column(var = "name") %>%
group_by(name) %>%
mutate(first = min(which(mpg > 22))) %>%
ungroup() %>%
mutate(first = if_else(is.infinite(first, 33, first)))
df <- mtcars %>%
rownames_to_column(var = "name") %>%
group_by(name) %>%
mutate(first = min(which(mpg > 22))) %>%
ungroup() %>%
mutate(first = if_else(is.infinite(first), 33, first))
View(df)
df <- mtcars %>%
rownames_to_column(var = "name") %>%
group_by(name) %>%
mutate(first = min(which(mpg > 22))) %>%
ungroup() %>%
mutate(first = if_else(is.infinite(first), 33, first)) %>%
select(name, mpg, first)
View(df)
x <- rep(0,100)
y <- rep(1,100)
cor(x,y)
library(tidyverse)
x <- rnorm()
x <- rnorm(1000000)
ntile(x,100)
?ntile
rep(1,10)
rep(1)
rep(10)
rep(10,1)
x <- c(15.5, 17, 3/4, 77)
y <- c(1, 2, 3, 4)
X <- matrix(x, 2, 2)
Y <- matrix(y, 2, 2)
X%*%Y
x <- c(15.5, 17, 3/4, 77)
y <- c(12, 1.2, 3/4, 2)
X <- matrix(x, 2, 2)
Y <- matrix(y, 2, 2)
X%*%Y
X
Y
Z <- X%*%Y
Z
X%*%Y
X*Y
X%/%Y
# Q5
A <- matrix(rnorm(25), nrow = 5)
A
# Q8
solve(A)
A^-1
# Q9
library(tidyverse)
load(iris)
iris <- iris
iris %>%
filter(Species == "setosa") %>%
filter(Petal.Length>1.4) %>%
select(Petal.Width) %>%
summarise(mu = mean(Petal.Width))
iris %>%
filter(Species == "setosa") %>%
filter(Petal.Length>1.4) %>%
summarise(mu = mean(Petal.Width))
# Q10
my_function <- function(x,y,z){
if (x>y){
if(x>z){
result = x*2
}
}
if (x<y){
if(x>z){
result = x+2
}
}
if (x>y){
if(x<z){
result = x+2
}
}
if (x<y){
if(x<z){
result = x/2
}
}
print(result)
}
x <- c(4,1)
y <- c(5,2)
z <- c(2,3)
my_function(x,y,z)
x <- c(4,1)
y <- c(5,2)
# Q10
my_function <- function(x,y,z){
N <- length(x)
result <- rep(0,N)
for (i in 1:N){
if (x[i]>y[i]){
if(x[i]>z[i]){
result[i] = x[i]*2
}
}
if (x[i]<y[i]){
if(x[i]>z[i]){
result = x+2
}
}
if (x[i]>y[i]){
if(x[i]<z[i]){
result[i] = x[i]+2
}
}
if (x[i]<y[i]){
if(x[i]<z[i]){
result[i] = x[i]/2
}
}
}
}
x <- c(4,1)
y <- c(5,2)
z <- c(2,3)
my_function(x,y,z)
k <- my_function(x,y,z)
# Q10
my_function <- function(x,y,z){
N <- length(x)
result <- rep(0,N)
for (i in 1:N){
if (x[i]>y[i]){
if(x[i]>z[i]){
result[i] = x[i]*2
}
}
if (x[i]<y[i]){
if(x[i]>z[i]){
result = x+2
}
}
if (x[i]>y[i]){
if(x[i]<z[i]){
result[i] = x[i]+2
}
}
if (x[i]<y[i]){
if(x[i]<z[i]){
result[i] = x[i]/2
}
}
}
result
}
x <- c(4,1)
y <- c(5,2)
z <- c(2,3)
my_function(x,y,z)
setwd("~/Documents/GitHub/Governance/replicate_figures/code/")
# import data and stationarity test --------------------------------------------
setwd("~/Documents/GitHub/Governance/replicate_figures/data/")
source('~/Documents/GitHub/Governance/replicate_figures/code/Figure_1.R')
